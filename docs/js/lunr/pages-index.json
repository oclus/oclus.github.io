[{"title":"My Post","href":"/my-post","content":"This is the first post in this blog"},{"title":"My Grunt Hugo Lunrjs Take","tags":["tutorial","hugo"],"href":"/post/my-grunt-hugo-lunrjs-take","content":"This tutorial is based on sebzs Hugo search tutorialhttpsgistgithubcomsebzefddfc8fdcb6b480f567 with my own modification for this blog site How to implement a custom search for Hugohttpgohugoio usig Gruntjshttpgruntjscom and Lunrjshttplunrjscom Requirements Install the following tools NodejshttpsgithubcomjoyentnodewikiInstallingNodejsviapackagemanager Gruntjshttpgruntjscomgettingstarted Install npm install savedev gruntcli to save the Grunt binary locally and add the script below to run npm run index for generating the index json file when updating contents folder json scripts index nodemodulesbingrunt lunrindex Setup Project organization Here is my Hugo based website project structure oclusgithubio Hugo project root folder content layout static js lunr Where we generate the lunr json index file vendor lunrjsminjs lunrjs library configyaml Gruntfilejs Where the magic happens packagejson Dependencies declaration required to build the index Install the Nodejs dependencies From the project root folder launch npm install savedev grunt string yaml stringhttpstringjscom do almost all the work yamljshttpswwwnpmjscompackageyamljs Used to parse the Frontmatter mine is in YAML Time to work The principle We will work both at buildtime and runtime With Gruntjs buildtime well generate a JSON index file and with a small js script runtime initilize and use lunrjs Build the Lunr index file Lunrjs allows you to define fields to describe your pages documents in lunrjs terms that will be used to search and hopefully find stuff The index file is basically a JSON file corresponding to an array of all the documents pages composing the website Here are the fields I chose to describe my pages title Frontmatter title or file name tags Frontmatter tags or nothing content File content ref Reworked file path used as absolute URL Workflow 1 Recursively walk through all files of the content folder 2 Two possibilities 1 Markdown file 1 Parse the Frontmatter to extract the title and the tags 2 Parse and clean the content 2 HTML file 1 Parse and clean the content 2 Use the file name as title 3 Use the path file as ref link toward the page Show me the code Here is the Gruntfilejs file js var yaml requireyamljs var S requirestring var CONTENTPATHPREFIX content moduleexports functiongrunt gruntregisterTasklunrindex function gruntlogwritelnBuild pages index var indexPages function var pagesIndex gruntfilerecurseCONTENTPATHPREFIX functionabspath rootdir subdir filename gruntverbosewritelnParse fileabspath pagesIndexpushprocessFileabspath filename return pagesIndex var processFile functionabspath filename var pageIndex if SfilenameendsWithhtml pageIndex processHTMLFileabspath filename else pageIndex processMDFileabspath filename return pageIndex var processHTMLFile functionabspath filename var content gruntfilereadabspath var pageName SfilenamechompRighthtmls var href Sabspath chompLeftCONTENTPATHPREFIXs return title pageName href href content ScontenttrimstripTagsstripPunctuations var processMDFile functionabspath filename var content gruntfilereadabspath var pageIndex First separate the Front Matter from the content and parse it Note that yaml is "}]